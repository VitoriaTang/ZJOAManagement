@{
    ViewBag.Title = "Setup";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ZJOASystem.Controllers.ResourceReader.GetString("PRODUCT_SETUP")</h2>

<p>
   <span> @Html.ActionLink(ZJOASystem.Controllers.ResourceReader.GetString("PRODUCT_CREATE"), "Create") </span>
    <span>&nbsp;&nbsp;|&nbsp;&nbsp;</span>
    <span>@Html.ActionLink(ZJOASystem.Controllers.ResourceReader.GetString("BACKTO_PRODUCTLIST"), "Index")</span>
</p>

<form id="formid" method='post'>

    @Html.Hidden("jsondata", ViewData["jsondata"], new { id = "hiddenjsondata" })
    @Html.Hidden("operation", ViewData["operation"], new { id = "hiddenoperation" })
    @Html.Hidden("operator", ViewData["operator"], new { id = "hiddenoperator" })
    @Html.Hidden("newProductGuid", ViewData["newProductGuid"], new { id = "hiddennewProductGuid" })
    <div id="treeGrid">
    </div>
</form>
@Scripts.Render("~/bundles/jqwidgets/treegrid")

<script type="text/javascript">
    $(document).ready(function () {
        var newRowID = null;
        // prepare the data
        var source =
        {
            dataType: "json",
            dataFields: [
                { name: 'NameEncode', type: 'string' },
                { name: 'Encode', type: 'string' },
                { name: 'ParentGuid', type: 'string' },
                { name: 'ProductGuid', type: 'string' },
                { name: 'ActionEmployee', type: 'string' },
                { name:'ActionTime', type:'date'}
           ],
            hierarchy:
            {
                keyDataField: { name: 'ProductGuid' },
                parentDataField: { name: 'ParentGuid' }
            },
            id: 'ProductGuid',
            url: 'GetProducts'
        };

        // prepare the data

        var dataAdapter = new $.jqx.dataAdapter(source);
        // create Tree Grid
        $("#treeGrid").jqxTreeGrid(
        {
            width: 800,
            source: dataAdapter,
            pageable: true,
            editable: true,
            showToolbar: true,
            ready: function () {
                //$("#treeGrid").jqxTreeGrid('expandRow', '2');
            },
            editSettings: {
                saveOnPageChange: true,
                saveOnBlur: true,
                saveOnSelectionChange: true,
                cancelOnEsc: true,
                saveOnEnter: true,
                editOnDoubleClick: true,
                editOnF2: false
            },
            pagerButtonsCount: 8,
            toolbarHeight: 35,
            renderToolbar: function (toolBar) {
                var toTheme = function (className) {
                    return className;
                }
                // appends buttons to the status bar.
                var container = $("<div style='overflow: hidden; position: relative; height: 100%; width: 100%;'></div>");
                var buttonTemplate = "<div style='float: left; padding: 3px; margin: 2px;'><div style='margin: 4px; width: 16px; height: 16px;'></div></div>";
                var addButton = $(buttonTemplate);
                var editButton = $(buttonTemplate);
                var deleteButton = $(buttonTemplate);
                var updateButton = $(buttonTemplate);
                var cancelButton = $(buttonTemplate);
                container.append(addButton);
                container.append(editButton);
                container.append(deleteButton);
                container.append(updateButton);
                container.append(cancelButton);
                toolBar.append(container);
                addButton.jqxButton({ cursor: "pointer", enableDefault: false, disabled: false, height: 25, width: 25 });
                addButton.find('div:first').addClass(toTheme('jqx-icon-plus'));
                addButton.jqxTooltip({ position: 'bottom', content: "Add" });
                editButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false, height: 25, width: 25 });
                editButton.find('div:first').addClass(toTheme('jqx-icon-edit'));
                editButton.jqxTooltip({ position: 'bottom', content: "Edit" });
                deleteButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false, height: 25, width: 25 });
                deleteButton.find('div:first').addClass(toTheme('jqx-icon-delete'));
                deleteButton.jqxTooltip({ position: 'bottom', content: "Delete" });
                updateButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false, height: 25, width: 25 });
                updateButton.find('div:first').addClass(toTheme('jqx-icon-save'));
                updateButton.jqxTooltip({ position: 'bottom', content: "Save Changes" });
                cancelButton.jqxButton({ cursor: "pointer", disabled: true, enableDefault: false, height: 25, width: 25 });
                cancelButton.find('div:first').addClass(toTheme('jqx-icon-cancel'));
                cancelButton.jqxTooltip({ position: 'bottom', content: "Cancel" });

                var updateButtons = function (action) {
                    switch (action) {
                        case "Select":
                            addButton.jqxButton({ disabled: false });
                            deleteButton.jqxButton({ disabled: false });
                            editButton.jqxButton({ disabled: false });
                            updateButton.jqxButton({ disabled: true });
                            cancelButton.jqxButton({ disabled: true });
                            break;
                        case "Unselect":
                            deleteButton.jqxButton({ disabled: true });
                            editButton.jqxButton({ disabled: true });
                            updateButton.jqxButton({ disabled: true });
                            cancelButton.jqxButton({ disabled: true });
                            break;
                        case "Edit":
                            addButton.jqxButton({ disabled: true });
                            deleteButton.jqxButton({ disabled: true });
                            editButton.jqxButton({ disabled: true });
                            updateButton.jqxButton({ disabled: false });
                            cancelButton.jqxButton({ disabled: false });
                            break;
                        case "End Edit":
                            addButton.jqxButton({ disabled: false });
                            deleteButton.jqxButton({ disabled: false });
                            editButton.jqxButton({ disabled: false });
                            updateButton.jqxButton({ disabled: true });
                            cancelButton.jqxButton({ disabled: true });
                            break;
                    }
                }
                var rowKey = null;
                $("#treeGrid").on('rowSelect', function (event) {
                    var args = event.args;
                    rowKey = args.key;
                    updateButtons('Select');

                });
                $("#treeGrid").on('rowUnselect', function (event) {
                    updateButtons('Unselect');
                });
                $("#treeGrid").on('rowEndEdit', function (event) {
                    updateButtons('End Edit');

                    var args = event.args;
                    // row key
                    var rowKey = args.key;
                    // row's data.
                    var row = args.row;
                    
                    row.ProductGuid = document.getElementById("hiddennewProductGuid").value;
                    if (row.parent) {
                        document.getElementById("hiddenjsondata").value = "{'ProductGuid':'" + row.ProductGuid + "', 'ParentGuid':'" + row.parent.ProductGuid + "'}";
                    }
                    else {
                        document.getElementById("hiddenjsondata").value = "{'ProductGuid':'" + row.ProductGuid + "', 'ParentGuid':'" + row.ProductGuid + "'}";

                    }
                   
                   
                    document.getElementById("hiddenoperator").value = row.ActionEmployee;
                    
                });
                $("#treeGrid").on('rowBeginEdit', function (event) {
                    updateButtons('Edit');
                });

                addButton.click(function (event) {
                    if (!addButton.jqxButton('disabled')) {
                        var d = new Date();
                        newRowID = "";//"#temp_"+d.getTime();
                        $("#treeGrid").jqxTreeGrid('expandRow', rowKey);
                        // add new empty row.
                        $("#treeGrid").jqxTreeGrid('addRow', "", {}, 'first', rowKey);
                        // select the first row and clear the selection.
                        $("#treeGrid").jqxTreeGrid('clearSelection');
                        $("#treeGrid").jqxTreeGrid('selectRow', newRowID);
                        // edit the new row.
                        $("#treeGrid").jqxTreeGrid('beginRowEdit', newRowID);
                        updateButtons('add');
                        document.getElementById("hiddenoperation").value = "Setup";

                    }
                });
                updateButton.click(function (event) {
                    if (!updateButton.jqxButton('disabled')) {
                        // save changes.
                        $("#treeGrid").jqxTreeGrid('endRowEdit', rowKey, false);
                        document.getElementById("formid").submit();
                    }
                });

                cancelButton.click(function (event) {
                    if (!cancelButton.jqxButton('disabled')) {
                        // cancel changes.
                        $("#treeGrid").jqxTreeGrid('endRowEdit', rowKey, true);
                    }
                });
                editButton.click(function () {
                    if (!editButton.jqxButton('disabled')) {
                        $("#treeGrid").jqxTreeGrid('beginRowEdit', rowKey);
                        updateButtons('edit');
                    }
                });
                deleteButton.click(function () {
                    if (!deleteButton.jqxButton('disabled')) {
                        var selection = $("#treeGrid").jqxTreeGrid('getSelection');
                        if (selection.length > 1) {
                            var keys = new Array();
                            for (var i = 0; i < selection.length; i++) {
                                keys.push($("#treeGrid").jqxTreeGrid('getKey', selection[i]));
                            }
                            $("#treeGrid").jqxTreeGrid('deleteRow', keys);
                        }
                        else {
                            $("#treeGrid").jqxTreeGrid('deleteRow', rowKey);
                        }
                        updateButtons('delete');

                        if (row.ProductGuid && row.ProductGuid != "") {
                            if (row.parent) {
                                document.getElementById("hiddenjsondata").value = "{'ProductGuid':'" + row.ProductGuid + "', 'ParentGuid':'" + row.parent.ProductGuid + "'}";
                            }
                            else {
                                document.getElementById("hiddenjsondata").value = "{'ProductGuid':'" + row.ProductGuid + "', 'ParentGuid':'" + row.ProductGuid + "'}";

                            }
                        }
                        document.getElementById("hiddenoperation").value = "UnSetup";
                        document.getElementById("formid").submit();
                    }
                });
            },
            columns: [
                {
                    text: 'ProductGuid', dataField: 'ProductGuid',  hidden:true
                },
              {
                  text: '@ZJOASystem.Controllers.ResourceReader.GetString("PRODUCT_NAME")', dataField: 'NameEncode', width: 300, 
                  columnType: "custom",
                  createEditor: function (row, cellvalue, editor, cellText, width, height) {
                      var dataValue;
                      var namesource = {
                          dataType: "json",
                          dataFields: [
                             { name: 'Name', type: 'string' },
                             { name: 'Encode', type: 'string' },
                             { name: 'ProductGuid', type: 'string' }
                          ],
                          url: 'GetUnassignProducts'
                      };
                      var namedataAdapter = new $.jqx.dataAdapter(namesource);
                      editor.jqxDropDownList({
                          autoDropDownHeight: true, source: namedataAdapter, width: '100%', height: '100%',
                          displayMember: 'Name',
                          valueMember: 'Name'
                      });

                      editor.on('select', function (event) {
                          var args = event.args;
                          if (args) {
                              // index represents the item's index.                
                              var index = args.index;
                             
                              if (index > -1) {
                                  var recorditem = editor.jqxDropDownList('source').cachedrecords[index];

                                  document.getElementById("hiddennewProductGuid").value = recorditem.ProductGuid;
                              }
                          }
                      });
                  },
                  initEditor: function (row, cellvalue, editor, celltext, width, height) {
                      // set the editor's current value. The callback is called each time the editor is displayed.
                      editor.jqxDropDownList('selectItem', cellvalue);
                  },
                  getEditorValue: function (row, cellvalue, editor) {
                      // return the editor's value.
                      return editor.val();
                  }
              },
              {
                  text: '@ZJOASystem.Controllers.ResourceReader.GetString("ACTION_EMPLOYEE")', dataField: 'ActionEmployee', width: 200, 
                  columnType: "custom",
                  createEditor: function (row, cellvalue, editor, cellText, width, height) {
                      var dataValue;
                      var namesource = {
                          dataType: "json",
                          dataFields: [
                             { name: 'NameEncode', type: 'string' },
                             { name: 'Encode', type: 'string' }
                          ],
                          url: 'GetActionEmployees'
                      };
                      var namedataAdapter = new $.jqx.dataAdapter(namesource);
                      editor.jqxDropDownList({
                          autoDropDownHeight: true, source: namedataAdapter, width: '100%', height: '100%',
                          displayMember: 'NameEncode',
                          valueMember: 'NameEncode'
                      });
                  },
                  initEditor: function (row, cellvalue, editor, celltext, width, height) {
                      // set the editor's current value. The callback is called each time the editor is displayed.
                      editor.jqxDropDownList('selectItem', cellvalue);
                  },
                  getEditorValue: function (row, cellvalue, editor) {
                      // return the editor's value.
                      return editor.val();
                  }
              },
              {
                  text: '@ZJOASystem.Controllers.ResourceReader.GetString("ACTION_TIME")', dataField: 'ActionTime', editable: false
              }
            ]
        });
    });
</script>

